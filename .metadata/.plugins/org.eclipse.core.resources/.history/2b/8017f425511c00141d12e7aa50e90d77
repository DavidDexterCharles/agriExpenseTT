package helper;

import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.database.sqlite.SQLiteDatabase;
import android.os.AsyncTask;

import com.example.agriexpensett.upaccendpoint.model.UpAcc;

public class Sync {
	private UpAcc localAcc;
	private UpAcc cloudAcc;
	SQLiteDatabase db;
	DbHelper dbh;
	Context context;
	TransactionLog tL;
	public enum Option{
		updateCloudOpt,updateLocalOpt,overwriteCloudOpt,overwriteLocalOpt
	}
	public Sync(SQLiteDatabase db, DbHelper dbh,Context context){
		this.db=db;
		this.dbh=dbh;
		this.context=context;
		
		tL=new TransactionLog(dbh, db,context);
	}
	public void start(String namespace,UpAcc cloudAcc){
		System.out.println("gonna sync now");
		localAcc=DbQuery.getUpAcc(db);
		
		//both exist
		if(cloudAcc!=null){System.out.println("Both exist");
			long localUpdate=localAcc.getLastUpdated();
			long cloudUpdate=cloudAcc.getLastUpdated();
			if(localUpdate>=cloudUpdate){//local more recent than cloud
				//the local does not have an account which means it has never been synced 
				if(localAcc.getAcc()==null || localAcc.getAcc().equals("")){System.out.println("confirm sync");
					/*there is no local account, the user must decide 
					 * if he's gonna use the datastore or if he's going to overwrite it*/
					confirmSync(localUpdate,cloudUpdate,namespace);
					
				//the local has an account which means it has already at some point synced
				}else{
					/*since it was synced at some point and the local is more updated
					 * just get the logs and update the cloud
					 */
					//TODO
				}
				
				
			}else if(cloudUpdate>localUpdate){//Cloud is more updated
				//the local does not have an account which means it has never been synced 
				if(localAcc.getAcc()==null || localAcc.getAcc().equals("")){System.out.println("confirm sync");
					/*there is no local account, the user must decide 
					 * if he's gonna use the datastore or if he's going to overwrite it*/
					confirmSync(localUpdate,cloudUpdate,namespace);
					
				//the local has an account which means it has already at some point synced
				}else{
					/*since it was synced at some point and the cloud is more updated
					 * just get the logs and update the local
					 */
					//TODO
					
				}
				
			}
		//only local exist
		}else{ 
			System.out.println("cloud doesnt exist so pushing all to cloud");
			tL.createCloud(namespace);
			CloudInterface cloudIF=new CloudInterface(context, db, dbh);
			cloudIF.insertUpAccC(namespace);
		//only cloud exist
		}
		
		/*
		else if(cloudAcc!=null){
			//will never be reached either
			System.out.println("local doesnt exist so pulling all from cloud");
			DbQuery.insertUpAcc(db,cloudAcc);
			tL.pullAllFromCloud(namespace);		
		}else{//both are null
			//will never be reached atm!!!
			System.out.println("neither exist so creating new local and pushing all to cloud");
			tL.createCloud(namespace);
			cloudIF.insertUpAccC(namespace);
		}*/
	}
	public class SyncExec extends AsyncTask<Option,Void,Void>{

		@Override
		protected Void doInBackground(Option... params) {
			Option option=params[0];// TODO Auto-generated method stub
			switch(option){
				case updateCloudOpt:
					//tL.updateCloud(cloudUpdate);
					break;
					
				case updateLocalOpt:
					//tL.logsUpdateLocal(namespace,localUpdate);
					break;
					
				case overwriteCloudOpt:
					//tL.removeNamespace(namespace);
					//tL.createCloud(namespace);
					break;
					
				case overwriteLocalOpt:
					//tL.logsUpdateLocal(namespace, lastLocalUpdated);
					break;
			}
			return null;
		}
		
	}
	private void confirmSync(long lastLocalUpdated,long lastCloudUpdated,String namespace){
		AlertDialog.Builder builder1 = new AlertDialog.Builder(context);
        builder1.setMessage("Data found online ? Do you want to overwrite local or overwrite cloud");
        builder1.setCancelable(true);
        Confirm c=new Confirm(lastLocalUpdated,lastCloudUpdated,namespace);
        builder1.setPositiveButton("Overwrite local",c);
        builder1.setNegativeButton("Overwrite cloud",c);
        AlertDialog alert1 = builder1.create();
        alert1.show();
	}
	private class Confirm implements DialogInterface.OnClickListener{
		long lastLocalUpdated,lastCloudUpdated;
		String namespace;
		public Confirm (long localUpdate,long cloudUpdate,String namespace){
			this.lastCloudUpdated=cloudUpdate;
			this.lastLocalUpdated=localUpdate;
			this.namespace=namespace;
		}
		@Override
		public void onClick(DialogInterface dialog, int which) {
			if(which==DialogInterface.BUTTON_POSITIVE){//overwrite local
				//TODO
				
				dialog.cancel();
				//DeleteExpenseList.this.finish();
			}else if(which==DialogInterface.BUTTON_NEGATIVE){//overwrite cloud
				System.out.println("updating cloud");
				
				//TODO
				dialog.cancel();
			}
		}
	}
	 
}

